{"version":3,"sources":["context/EmployeeContext.js","components/AddForm.js","components/EditForm.js","components/Employee.js","components/Pagination.js","components/EmployeeList.js","App.js","reportWebVitals.js","index.js"],"names":["EmployeeContext","createContext","EmployeeContextProvider","props","useState","employees","setEmployees","retrieveEmployees","a","axios","get","response","data","sortedEmployees","sort","b","lastName","useEffect","then","res","getAllEmployees","allEmployees","JSON","parse","localStorage","getItem","setItem","stringify","addEmployee","firstName","gender","email","address","phone","role","request","id","uuidv4","post","deleteEmployee","delete","filter","employee","updateEmployee","updatedEmployee","put","map","Provider","value","children","AddForm","useContext","newEmployee","setNewEmployee","onInputChange","e","target","name","Form","action","onSubmit","preventDefault","Group","InputGroup","className","Text","Control","type","placeholder","onChange","required","Select","selected","hidden","disabled","Button","EditForm","theEmployee","setfirstName","setlastName","setGender","setEmail","setAddress","setPhone","setRole","defaultValue","Employee","show","setShow","handleClose","OverlayTrigger","overlay","Tooltip","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","Pagination","pages","setCurrentPage","currentEmployees","numOfPages","i","push","currentButton","setCurrentButton","length","prev","href","page","index","next","EmployeeList","showAlert","setShowAlert","currentPage","employeesPerpage","setTimeout","indexOfLastEmployee","indexOfFirstEmployee","slice","totalPagesNum","Math","ceil","Alert","animation","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aea5ea71.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, { createContext, useEffect, useState } from 'react'\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const EmployeeContext = createContext()\n\nconst EmployeeContextProvider = (props) => {\n    const [employees, setEmployees] = useState([])\n\n    const retrieveEmployees = async () => {\n        const response = await axios.get(`http://localhost:3000/employees`)\n        return response.data\n    }\n\n    const sortedEmployees = employees.sort((a,b) => (a.lastName < b.lastName ? -1 : 1))\n\n    useEffect(() => {\n        axios.get(`http://localhost:3000/employees`).then(res => {\n            setEmployees(res.data)\n        })\n    }, [])\n\n    useEffect(() => {\n        const getAllEmployees = async () => {\n            const allEmployees = await retrieveEmployees()\n            if(allEmployees) setEmployees(allEmployees)\n        }\n        getAllEmployees()\n    }, [])\n\n    useEffect(()=> {\n        setEmployees(JSON.parse(localStorage.getItem('employees')))\n    },[])\n    \n    useEffect(() => {\n        localStorage.setItem('employees', JSON.stringify(employees));\n    })\n\n    const addEmployee = async (firstName, lastName, gender, email, address, phone, role) => {\n        const request = \n            {\n                id: uuidv4(),\n                firstName,\n                lastName,\n                gender,\n                email,\n                address,\n                phone,\n                role,\n            }\n        const response = await axios.post(`http://localhost:3000/employees`, request)\n        setEmployees(\n            [...employees, response.data]\n        )\n    }\n\n    const deleteEmployee = async (id) => {\n        await axios.delete(`http://localhost:3000/employees/${id}`)\n        setEmployees(employees.filter(employee => employee.id !== id))\n    }\n\n    const updateEmployee = async (id, updatedEmployee) => {\n        await axios.put(`http://localhost:3000/employees/${updatedEmployee.id}`, updatedEmployee)\n        setEmployees(employees.map((employee) => employee.id === id ? updatedEmployee : employee))\n    }\n\n    return (\n        <div>\n            <EmployeeContext.Provider  \n                value={{sortedEmployees, addEmployee, deleteEmployee, updateEmployee}}\n            >\n                {props.children}\n            </EmployeeContext.Provider>\n        </div>\n    )\n}\n\nexport default EmployeeContextProvider\n","import React from 'react'\nimport { useContext, useState } from 'react'\nimport { EmployeeContext } from '../context/EmployeeContext';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\n\nconst AddForm = () => {\n    const {addEmployee} = useContext(EmployeeContext)\n\n    const [newEmployee, setNewEmployee] = useState({\n        firstName: '',\n        lastName: '',\n        gender: '',\n        email: '',\n        address: '',\n        phone: '',\n        role: '',\n    })\n\n    const onInputChange = (e) => {\n        setNewEmployee({...newEmployee, [e.target.name]: e.target.value})\n    }\n\n    const {firstName, lastName, gender, email, address, phone, role} = newEmployee\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        addEmployee(firstName, lastName, gender, email, address, phone, role)\n\n        setNewEmployee({\n            firstName: '',\n            lastName: '',\n            gender: '',\n            email: '',\n            address: '',\n            phone: '',\n            role: '',\n        })\n    }\n\n    return (\n        <Form action=\"\" onSubmit={handleSubmit}>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        First name : \n                    </InputGroup.Text>\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Enter your  name\" \n                        name=\"firstName\"\n                        value={firstName}\n                        onChange={e => onInputChange(e)}\n                        required\n                    />  \n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Last name : \n                    </InputGroup.Text>\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Enter your name\" \n                        name=\"lastName\"\n                        value={lastName}\n                        onChange={e => onInputChange(e)}\n                        required\n                    />  \n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Gender : \n                    </InputGroup.Text>\n                    <Form.Select \n                        onChange={e => onInputChange(e)} \n                        name=\"gender\"\n                        required\n                    >\n                        <option value=\"\" selected hidden disabled>Choose your gender</option>\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>\n                    </Form.Select>\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Email : \n                    </InputGroup.Text>\n                    <Form.Control  \n                        type=\"email\"\n                        placeholder=\"Enter your email\" \n                        name=\"email\"\n                        value={email}\n                        onChange={e => onInputChange(e)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Address : \n                    </InputGroup.Text>\n                    <Form.Control  \n                        type=\"text\"  \n                        placeholder=\"Enter your address\" \n                        name=\"address\"\n                        value={address}\n                        onChange={e => onInputChange(e)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Phone : \n                    </InputGroup.Text>\n                    <Form.Control  \n                        type=\"text\" \n                        placeholder=\"Enter your phone number\"\n                        name=\"phone\"\n                        value={phone}\n                        onChange={e => onInputChange(e)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Role : \n                    </InputGroup.Text>\n                    <Form.Control  \n                        type=\"text\" \n                        placeholder=\"Enter your role\" \n                        name=\"role\"\n                        value={role}\n                        onChange={e => onInputChange(e)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Button type=\"submit\">Add new employee</Button>\n        </Form>\n    )\n}\n\nexport default AddForm\n","import { Button, Form, InputGroup } from 'react-bootstrap';\nimport React from 'react'\nimport { useContext, useState } from 'react'\nimport { EmployeeContext } from '../context/EmployeeContext';\n\nconst EditForm = ({theEmployee}) => {  \n    const id = theEmployee.id\n\n    const [firstName, setfirstName] = useState(theEmployee.firstName)\n    const [lastName, setlastName] = useState(theEmployee.lastName)\n    const [gender, setGender] = useState(theEmployee.gender)\n    const [email, setEmail] = useState(theEmployee.email)\n    const [address, setAddress] = useState(theEmployee.address)\n    const [phone, setPhone] = useState(theEmployee.phone)\n    const [role, setRole] = useState(theEmployee.role)\n\n    const {updateEmployee} = useContext(EmployeeContext)\n\n    const updatedEmployee = {id, firstName, lastName, gender, email, address, phone, role}\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        updateEmployee(id, updatedEmployee)\n    }\n\n    return (\n        <Form action=\"\" onSubmit={handleSubmit}>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        First Name :\n                    </InputGroup.Text>\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Name\" \n                        name=\"firstName\"\n                        value={firstName}\n                        onChange={(e) => setfirstName(e.target.value)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Last Name :\n                    </InputGroup.Text>\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Name\" \n                        name=\"lastName\"\n                        value={lastName}\n                        onChange={(e) => setlastName(e.target.value)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Gender :\n                    </InputGroup.Text>\n                    <Form.Select \n                        onChange={(e) => setGender(e.target.value)}  \n                        name=\"gender\"\n                        defaultValue={gender}\n                        required\n                    >\n                        <option value=\"\" selected disabled hidden>Choose your gender</option>\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>\n                    </Form.Select>\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Email :\n                    </InputGroup.Text>\n                    <Form.Control  \n                        type=\"email\" \n                        placeholder=\"Email\" \n                        name=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Address :\n                    </InputGroup.Text>\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Address\" \n                        name=\"address\"\n                        value={address}\n                        onChange={(e) => setAddress(e.target.value)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Phone :\n                    </InputGroup.Text>\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Phone\" \n                        name=\"phone\"\n                        value={phone}\n                        onChange={(e) => setPhone(e.target.value)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Form.Group>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">\n                        Role :\n                    </InputGroup.Text>\n                    <Form.Control \n                        type=\"text\" \n                        placeholder=\"Role\" \n                        name=\"role\"\n                        value={role}\n                        onChange={(e) => setRole(e.target.value)}\n                        required\n                    />\n                </InputGroup>\n            </Form.Group>\n            <Button type=\"submit\">Edit employee</Button>\n        </Form>\n    )\n}\n\nexport default EditForm\n","import React, { Fragment, useEffect, useState } from 'react'\nimport { EmployeeContext } from '../context/EmployeeContext'\nimport { useContext } from 'react'\nimport EditForm from './EditForm'\nimport { Button, Modal, OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nconst Employee = ({employee}) => {\n    const {deleteEmployee} = useContext(EmployeeContext)\n\n    const [show, setShow] = useState(false)\n\n    const handleShow = () => setShow(true)\n    const handleClose= () => setShow(false)\n\n    useEffect(() => {\n        handleClose()\n    }, [employee])\n\n    return (\n        <Fragment key={employee.id}>\n            <td>{employee.firstName}</td>\n            <td>{employee.lastName}</td>\n            <td>{employee.gender}</td>\n            <td>{employee.email}</td>\n            <td>{employee.address}</td>\n            <td>{employee.phone}</td>\n            <td>{employee.role}</td>\n            <td>\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={'tooltip-top'}>\n                            Edit\n                        </Tooltip>\n                    }\n                >\n                    <Button \n                        className=\"dp-inline\"\n                        variant=\"warning\"\n                        onClick={handleShow}>\n                        <i className=\"material-icons\">&#xE254;</i>\n                    </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={'tooltip-top'}>\n                            Delete\n                        </Tooltip>\n                    }\n                >\n                    <Button \n                    className=\"dp-inline\"\n                    variant=\"danger\"\n                    onClick={() => deleteEmployee(employee.id)}>\n                    <i className=\"material-icons\">&#xE872;</i>\n                </Button>\n                </OverlayTrigger>\n            </td>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Employee</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <EditForm theEmployee={employee}/>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button \n                        onClick={handleClose}\n                        variant=\"secondary\"\n                    >Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    )\n}\n\nexport default Employee\n","import userEvent from '@testing-library/user-event'\nimport React, { useEffect, useState } from 'react'\n\nconst Pagination = ({pages, setCurrentPage, currentEmployees, sortedEmployees}) => {\n\n    const numOfPages = []\n\n    for(let i = 1; i <= pages; i++) {\n        numOfPages.push(i)\n    }\n\n    const [currentButton, setCurrentButton] = useState(1)\n\n    useEffect(() => {\n        setCurrentPage(currentButton)\n    }, [currentButton, setCurrentPage])\n\n    return (\n        <div className=\"clearfix\">\n            <div className=\"hint-text\">Showing <b>{currentEmployees.length}</b> out of <b>{sortedEmployees.length}</b> entries</div>\n            <ul className=\"pagination\">\n                <li \n                    className={`${currentButton === 1 ? 'page-item disabled' : 'page-item'}`}\n                    onClick={() => setCurrentButton((prev) => prev === 1 ? prev : prev - 1)}\n                >\n                    <a href=\"#\">Previous</a>\n                </li>\n\n                {numOfPages.map((page, index) => (\n                    <li \n                        className={`${currentButton === page ? 'page-item active' : 'page-item'}`}\n                        key={index}\n                    >\n                        <a \n                            href=\"#\" \n                            className=\"page-link\"\n                            onClick={() => setCurrentButton(page)}\n                        >{page}\n                        </a>\n                    </li>\n                ))}\n\n                <li \n                    className={`${currentButton === numOfPages.length ? 'page-item disabled' : 'page-item'}`}\n                    onClick={() => setCurrentButton((next) => next === numOfPages.length ? next : next + 1)}\n                >\n                    <a href=\"#\">Next</a>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Pagination\n\n{/* <li className=\"page-item disabled\"><a href=\"#\">Previous</a></li>\n<li className=\"page-item\"><a href=\"#\" className=\"page-link\">1</a></li>\n<li className=\"page-item\"><a href=\"#\" className=\"page-link\">2</a></li>\n<li className=\"page-item active\"><a href=\"#\" className=\"page-link\">3</a></li>\n<li className=\"page-item\"><a href=\"#\" className=\"page-link\">4</a></li>\n<li className=\"page-item\"><a href=\"#\" className=\"page-link\">5</a></li>\n<li className=\"page-item\"><a href=\"#\" className=\"page-link\">Next</a></li> */}","import React, { useContext, useEffect, useState } from 'react'\nimport {EmployeeContext} from '../context/EmployeeContext';\nimport AddForm from './AddForm'\nimport Employee from './Employee'\nimport Button from 'react-bootstrap/Button';\nimport { Alert, Modal } from 'react-bootstrap';\nimport Pagination from './Pagination';\n\nconst EmployeeList = () => {\n    const {sortedEmployees} = useContext(EmployeeContext)\n\n    const [showAlert, setShowAlert] = useState(false)\n\n    const [show, setShow] = useState(false)\n\n    const handleShow = () => setShow(true)\n    const handleClose= () => setShow(false)\n\n    const [currentPage, setCurrentPage] = useState(1)\n    const [employeesPerpage] = useState(5)\n\n    const handleShowAlert = () => {\n        setShowAlert(true)\n        setTimeout(() => {\n            setShowAlert(false)\n        }, 2000)\n    }\n\n    useEffect(() => {\n        handleClose()\n\n        return () => {\n            handleShowAlert()\n        }\n    }, [sortedEmployees])\n\n    const indexOfLastEmployee = currentPage * employeesPerpage\n    const indexOfFirstEmployee = indexOfLastEmployee - employeesPerpage\n    const currentEmployees = sortedEmployees.slice(indexOfFirstEmployee, indexOfLastEmployee)\n    const totalPagesNum = Math.ceil(sortedEmployees.length / employeesPerpage)\n\n    return (\n        <div className=\"container-xl\">\n            <div className=\"table-wrapper\">\n                <div className=\"table-title\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-6\">\n                            <h2>Manage Employee</h2>\n                        </div>\n                        <div className=\"col-sm-6\">\n                            <Button onClick={handleShow}><i className=\"material-icons\">&#xE147;</i> <span>Add New Employee</span></Button>\n                        </div>\n                    </div>\n                </div>\n\n                <Alert \n                    show={showAlert}\n                    variant=\"success\"\n                >\n                    Employee List Updated\n                </Alert>\n\n                <table className=\"table table-striped table-hover\">\n                    <thead>\n                        <tr>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Gender</th>\n                            <th>Email</th>\n                            <th>Address</th>\n                            <th>Phone</th>\n                            <th>Role</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            currentEmployees.map(employee => (\n                                <tr key={employee.id}>\n                                    <Employee employee={employee}/> \n                                </tr>\n                            ))\n                        }\n                    </tbody>\n                </table>\n\n                <Pagination \n                    pages = {totalPagesNum}\n                    setCurrentPage = {setCurrentPage}\n                    currentEmployees = {currentEmployees}\n                    sortedEmployees = {sortedEmployees}\n                />\n\n                <Modal \n                    show={show} \n                    onHide={handleClose} \n                    animation={true}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Add New Employee</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <AddForm/>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button \n                            onClick={handleClose}\n                            variant=\"secondary\">Close</Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        </div>\n    )\n}\n\nexport default EmployeeList\n","import './App.css';\nimport React from 'react';\nimport EmployeeList from './components/EmployeeList';\nimport EmployeeContextProvider from './context/EmployeeContext';\n\nconst App = () => {\n    return (\n        <div>\n            <EmployeeContextProvider>\n                <EmployeeList/> \n            </EmployeeContextProvider>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}